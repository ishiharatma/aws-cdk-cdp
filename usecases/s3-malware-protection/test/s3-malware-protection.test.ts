import * as cdk from 'aws-cdk-lib';
import { Template, Match } from 'aws-cdk-lib/assertions';
import { S3MalwareProtectionStack } from '../lib/s3-malware-protection-stack';

const defaultEnv = {
  account: '123456789012',
  region: 'ap-northeast-1',
};

const pjName = 'unittest';
const envName = 'test';

test('S3MalwareProtectionStack creates resources correctly', () => {
  // GIVEN
  const app = new cdk.App();
  const stack = new S3MalwareProtectionStack(app, 'MyTestStack', {
    pjName: pjName,
    envName: envName,
    description: 'Create an environment to check the operation of Malware Protection for S3.',
    isAutoDeleteObject: true,
    env: defaultEnv,
    terminationProtection: true,
  });

  // WHEN
  const template = Template.fromStack(stack);

  // THEN
  // Check if an S3 bucket is created
  template.resourceCountIs('AWS::S3::Bucket', 1);
  template.hasResourceProperties('AWS::S3::Bucket', {
    BucketName: Match.stringLikeRegexp(`${pjName}-${envName}-malware-protection-test-.*`),
  });

  // Check if an IAM Role for GuardDuty is created
  template.resourceCountIs('AWS::IAM::Role', 2);
  template.hasResourceProperties('AWS::IAM::Role', {
    AssumeRolePolicyDocument: {
      Statement: Match.arrayWith([
        Match.objectLike({
          Effect: 'Allow',
          Principal: {
            Service: 'malware-protection-plan.guardduty.amazonaws.com',
          },
        }),
      ]),
    },
  });

  // Check if the GuardDuty Malware Protection Plan is created
  template.resourceCountIs('AWS::GuardDuty::MalwareProtectionPlan', 1);
  template.hasResourceProperties('AWS::GuardDuty::MalwareProtectionPlan', {
    ProtectedResource: {
      S3Bucket: {
        BucketName: Match.anyValue(),
      },
    },
    Actions: {
      Tagging: {
        Status: 'ENABLED',
      },
    },
  });

  // Check if an SNS Topic is created
  template.resourceCountIs('AWS::SNS::Topic', 1);
  template.hasResourceProperties('AWS::SNS::Topic', {
    DisplayName: 'GuardDuty Malware Protection Notification',
    TopicName: Match.stringLikeRegexp(`${pjName}-${envName}-malware-protection-test-.*`),
  });

  // Check if an EventBridge Rule is created
  template.resourceCountIs('AWS::Events::Rule', 1);
  template.hasResourceProperties('AWS::Events::Rule', {
    Description: 'CloudWatch Event Rule to send notification from GuardDuty Malware Protection.',
    EventPattern: {
      source: ['aws.guardduty'],
      'detail-type': ['GuardDuty Malware Protection Object Scan Result'],
      detail: {
        scanResultDetails: {
          scanResultStatus: ['THREATS_FOUND', 'UNSUPPORTED', 'ACCESS_DENIED', 'FAILED'],
        },
      },
    },
  });
});