import * as cdk from 'aws-cdk-lib';
import { StackProps } from 'aws-cdk-lib';
import { Construct } from 'constructs';
import {
  aws_s3 as s3,
  aws_guardduty as guardduty,
  aws_iam as iam,
  aws_events as cwe,
  aws_sns as sns,
  aws_events_targets as cwet,
} from 'aws-cdk-lib';

interface S3MalwareProtectionStackProps extends StackProps {
  readonly pjName: string;
  readonly envName: string;
  readonly isAutoDeleteObject?: boolean;
}

export class S3MalwareProtectionStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props: S3MalwareProtectionStackProps) {
    super(scope, id, props);
    const accountId:string = cdk.Stack.of(this).account;
    const region:string = cdk.Stack.of(this).region;

    // S3 Bucket
    const targetBucket = new s3.Bucket(this,'bucket', {
      bucketName: [props.pjName, props.envName, 'malware-protection-test',accountId].join('-'),
      removalPolicy: props.isAutoDeleteObject ? cdk.RemovalPolicy.DESTROY : cdk.RemovalPolicy.RETAIN,
      autoDeleteObjects: props.isAutoDeleteObject ?? false,
    })

    // create GuardDuty Role
    // see:https://docs.aws.amazon.com/ja_jp/guardduty/latest/ug/troubleshoot-s3-malware-protection-status-errors.html
    const guardDutyPolicy = new iam.ManagedPolicy(this, 'guardDutyPolicy',{
      statements: [
        // AllowManagedRuleToSendS3EventsToGuardDuty
        new iam.PolicyStatement({
          effect: iam.Effect.ALLOW,
          actions: [
            "events:PutRule",
            "events:DeleteRule",
            "events:PutTargets",
            "events:RemoveTargets",
          ],
          resources: [
            `arn:aws:events:${this.region}:${this.account}:rule/DO-NOT-DELETE-AmazonGuardDutyMalwareProtectionS3*`,
          ],
          conditions: {
            StringLike: {
              "events:ManagedBy":
                "malware-protection-plan.guardduty.amazonaws.com",
            },
          },
        }),
        // AllowGuardDutyToMonitorEventBridgeManagedRule
        new iam.PolicyStatement({
          effect: iam.Effect.ALLOW,
          actions: ["events:DescribeRule", "events:ListTargetsByRule"],
          resources: [
            `arn:aws:events:${this.region}:${this.account}:rule/DO-NOT-DELETE-AmazonGuardDutyMalwareProtectionS3*`,
          ],
        }),
        // AllowPostScanTagging
        new iam.PolicyStatement({
          effect: iam.Effect.ALLOW,
          actions: [
            "s3:PutObjectTagging",
            "s3:GetObjectTagging",
            "s3:PutObjectVersionTagging",
            "s3:GetObjectVersionTagging",
          ],
          resources: [targetBucket.arnForObjects("*")],
        }),
        // AllowEnableS3EventBridgeEvents
        new iam.PolicyStatement({
          effect: iam.Effect.ALLOW,
          actions: ["s3:PutBucketNotification", "s3:GetBucketNotification"],
          resources: [targetBucket.bucketArn],
        }),
        // AllowPutValidationObject
        new iam.PolicyStatement({
          effect: iam.Effect.ALLOW,
          actions: ["s3:PutObject"],
          resources: [
            `arn:aws:s3:::${targetBucket.bucketName}/malware-protection-resource-validation-object`,
          ],
        }),
         // allow list objects
        new iam.PolicyStatement({
          effect: iam.Effect.ALLOW,
          actions: ["s3:ListBucket"],
          resources: [targetBucket.bucketArn],
        }),
        // AllowMalwareScan
        new iam.PolicyStatement({
          effect: iam.Effect.ALLOW,
          actions: ["s3:GetObject", "s3:GetObjectVersion"],
          resources: [targetBucket.arnForObjects("*")],
        }),
        // AllowDecryptForMalwareScan
        new iam.PolicyStatement({
          actions: ["kms:GenerateDataKey", "kms:Decrypt"],
          resources: [`arn:aws:kms:${this.region}:${this.account}:key/*`],
          conditions: {
            StringLike: { "kms:ViaService": "s3.*.amazonaws.com" },
          },
        })
      ]
    });

    const guardDutyRole = new iam.Role(this, 'guardDutyRole', {
      assumedBy: new iam.ServicePrincipal('malware-protection-plan.guardduty.amazonaws.com'),
      managedPolicies: [
        guardDutyPolicy
      ]
    });

    // see: https://docs.aws.amazon.com/ja_jp/guardduty/latest/ug/tag-based-access-s3-malware-protection.html#apply-tbac-s3-malware-protection
    targetBucket.addToResourcePolicy(
      new iam.PolicyStatement({
        sid: 'NoReadExceptForClean',
        effect: iam.Effect.DENY,
        actions: ['s3:GetObject', 's3:GetObjectVersion'],
        resources: [
          targetBucket.bucketArn,
          targetBucket.arnForObjects('*')
        ],
        notPrincipals: [
          new iam.AccountRootPrincipal(),
          new iam.ArnPrincipal(guardDutyRole.roleArn),
          new iam.ArnPrincipal(`arn:aws:iam::${accountId}:assumed-role/${guardDutyRole.roleName}/GuardDutyMalwareProtection`)
        ],
        conditions: {
          StringNotEquals: {
            "s3:ExistingObjectTag/GuardDutyMalwareScanStatus": "NO_THREATS_FOUND"
          }
        }
      }),
    );
    targetBucket.addToResourcePolicy(
      new iam.PolicyStatement({
        sid: 'OnlyGuardDutyCanTag',
        effect: iam.Effect.DENY,
        actions: ['s3:PutObjectTagging'],
        resources: [
          targetBucket.bucketArn,
          targetBucket.arnForObjects('*')
        ],
        notPrincipals: [
          new iam.AccountRootPrincipal(),
          new iam.ArnPrincipal(guardDutyRole.roleArn),
          new iam.ArnPrincipal(`arn:aws:iam::${accountId}:assumed-role/${guardDutyRole.roleName}/GuardDutyMalwareProtection`)
        ]
      }),
    );

    // Enable Malware Protection for the S3 Bucket
    // see: https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_guardduty.CfnMalwareProtectionPlan.html
    const malwareProtection = new guardduty.CfnMalwareProtectionPlan(this, 'malwareProtectionPlan', {
      protectedResource: {
        s3Bucket: {
          bucketName: targetBucket.bucketName,
        },
      },
      actions: {
        tagging: {
          status: 'ENABLED'
        }
      },
      role: guardDutyRole.roleArn,
    });

    // Create SNS Topic for GuardDuty Event
    const snsTopic = new sns.Topic(this, 'snsTopic', {
        displayName: 'GuardDuty Malware Protection Notification',
        topicName: [props.pjName, props.envName, 'malware-protection-test',accountId].join('-'),
    });

    // GuardDuty EventBridge
    const malwareProtectionEvents = new cwe.Rule(this, 'RuleMalwareProtectionGuardDuty', {
      description: 'CloudWatch Event Rule to send notification from GuardDuty Malware Protection.',
      enabled: true,
      eventPattern: {
          source: ['aws.guardduty'],
          detailType: ['GuardDuty Malware Protection Object Scan Result'],
          detail: {
              scanResultDetails: {
                scanResultStatus: ['THREATS_FOUND', 'UNSUPPORTED', 'ACCESS_DENIED','FAILED'],
              },
          },
      },
      //targets: [new cwet.SnsTopic(snsTopic)],
    });
    
    // see: https://docs.aws.amazon.com/ja_jp/guardduty/latest/ug/monitor-with-eventbridge-s3-malware-protection.html#set-up-malware-protection-s3-eventbridge-rules
    malwareProtectionEvents.addTarget(new cwet.SnsTopic(snsTopic,
      {
          message: cwe.RuleTargetInput.fromText(
              `${cwe.EventField.fromPath('$.detail-type')} in the ${cwe.EventField.fromPath('$.region')} region.
              account: ${cwe.EventField.fromPath('$.account')}
              region: ${cwe.EventField.fromPath('$.region')}
              s3BucketName: ${cwe.EventField.fromPath('$.detail.s3ObjectDetails.bucketName')}
              s3ObjectKey: ${cwe.EventField.fromPath('$.detail.s3ObjectDetails.objectKey')}
              scanResultStatus: ${cwe.EventField.fromPath('$.detail.scanResultDetails.scanResultStatus')}
              threats: ${cwe.EventField.fromPath('$.detail.scanResultDetails.threats[0].name')}
              createdAt: ${cwe.EventField.fromPath('$.time')}
              See below for details.
              https://${cwe.EventField.fromPath('$.region')}.console.aws.amazon.com/guardduty/home?region=${cwe.EventField.fromPath('$.region')}#/s3-malware-protection`
          )
      })
    );

  }
}
